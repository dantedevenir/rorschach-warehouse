"""Added initial table

Revision ID: edc1c2b450d0
Revises: 
Create Date: 2024-09-20 19:47:27.761264

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'edc1c2b450d0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('address',
    sa.Column('address', sa.Boolean(), nullable=False),
    sa.Column('city', sa.Boolean(), nullable=False),
    sa.Column('state', sa.Boolean(), nullable=False),
    sa.Column('zip_code', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('auth',
    sa.Column('user_mp', sa.Boolean(), nullable=False),
    sa.Column('password_mp', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('basic',
    sa.Column('issuer', sa.Boolean(), nullable=False),
    sa.Column('effective_date', sa.Boolean(), nullable=False),
    sa.Column('net_premium', sa.Boolean(), nullable=False),
    sa.Column('policy_aor', sa.Boolean(), nullable=False),
    sa.Column('gross_premium', sa.Boolean(), nullable=False),
    sa.Column('plan_hios_id', sa.Boolean(), nullable=False),
    sa.Column('expiration_date', sa.Boolean(), nullable=False),
    sa.Column('policy_status', sa.Boolean(), nullable=False),
    sa.Column('paid_through_date', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('detail',
    sa.Column('last_date_doc', sa.Boolean(), nullable=False),
    sa.Column('last_date_change', sa.Boolean(), nullable=False),
    sa.Column('out_of_pocket_max', sa.Boolean(), nullable=False),
    sa.Column('deductible', sa.Boolean(), nullable=False),
    sa.Column('followup_docs', sa.Boolean(), nullable=False),
    sa.Column('household_size', sa.Boolean(), nullable=False),
    sa.Column('household_income', sa.Boolean(), nullable=False),
    sa.Column('preferred_language', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('member_type',
    sa.Column('name', postgresql.ENUM('owner', 'spouse', 'dependent_1', 'dependent_2', 'dependent_3', 'dependent_4', 'dependent_5', 'dependent_6', 'dependent_7', name='membertype', create_type=False), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='policies'
    )
    op.create_table('status',
    sa.Column('name', postgresql.ENUM('problem', 'ok', 'down', name='status', create_type=False), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='policies'
    )
    op.create_table('unique',
    sa.Column('ffm_subscriber_id', sa.Boolean(), nullable=False),
    sa.Column('salesorder_no', sa.Boolean(), nullable=False),
    sa.Column('member_id', sa.Boolean(), nullable=False),
    sa.Column('ffm_app_id', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('name',
    sa.Column('name', postgresql.ENUM('aetna', 'ambetter', 'molina', 'oscar', 'florida_blue', 'blue_cross', 'united', 'cigna', 'avmed', 'ameritas', 'healthsherpa', 'healthcare', name='name', create_type=False), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='providers'
    )
    op.create_table('source_type',
    sa.Column('name', postgresql.ENUM('csv', 'scrap', name='sourcetype', create_type=False), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='providers'
    )
    op.create_table('type',
    sa.Column('name', postgresql.ENUM('obamacare', 'private', 'group', name='type', create_type=False), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='providers'
    )
    op.create_table('entity',
    sa.Column('ffm_subscriber_id', sa.String(), nullable=False),
    sa.Column('salesorder_no', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.String(), nullable=False),
    sa.Column('ffm_app_id', sa.BigInteger(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='snapshots'
    )
    op.create_table('member',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.Boolean(), nullable=False),
    sa.Column('last_name', sa.Boolean(), nullable=False),
    sa.Column('ssn', sa.Boolean(), nullable=False),
    sa.Column('gender', sa.Boolean(), nullable=False),
    sa.Column('dob', sa.Boolean(), nullable=False),
    sa.Column('applying', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['policies.group.id'], ),
    sa.ForeignKeyConstraint(['type_id'], ['policies.member_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('statement',
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('unique_id', sa.Integer(), nullable=True),
    sa.Column('basic_id', sa.Integer(), nullable=True),
    sa.Column('auth_id', sa.Integer(), nullable=True),
    sa.Column('detail_id', sa.Integer(), nullable=True),
    sa.Column('address_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['policies.address.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['auth_id'], ['policies.auth.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['basic_id'], ['policies.basic.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['detail_id'], ['policies.detail.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['entity_id'], ['snapshots.entity.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['group_id'], ['policies.group.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['unique_id'], ['policies.unique.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='policies'
    )
    op.create_table('source',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('type', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['type'], ['providers.source_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='providers'
    )
    op.create_table('provider',
    sa.Column('name', sa.Integer(), nullable=True),
    sa.Column('type', sa.Integer(), nullable=True),
    sa.Column('source', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['name'], ['providers.name.id'], ),
    sa.ForeignKeyConstraint(['source'], ['providers.source.id'], ),
    sa.ForeignKeyConstraint(['type'], ['providers.type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='providers'
    )
    op.create_table('snapshot',
    sa.Column('entity_id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['snapshots.entity.id'], ),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider.id'], ),
    sa.ForeignKeyConstraint(['status'], ['policies.status.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='snapshots'
    )
    policies_insert_status_data = PGFunction(
        schema="policies",
        signature="insert_status_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO policies.status (name) VALUES\n                ('problem'), ('ok'), ('down')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.create_entity(policies_insert_status_data) # type: ignore

    providers_insert_name_data = PGFunction(
        schema="providers",
        signature="insert_name_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO providers.name (name) VALUES\n                ('aetna'), ('ambetter'), ('molina'), ('oscar'), ('florida_blue'), ('blue_cross'), ('united'), ('cigna'), ('avmed'), ('ameritas'), ('healthsherpa'), ('healthcare')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.create_entity(providers_insert_name_data) # type: ignore

    providers_insert_type_data = PGFunction(
        schema="providers",
        signature="insert_type_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO providers.type (name) VALUES\n                ('obamacare'), ('private'), ('group')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.create_entity(providers_insert_type_data) # type: ignore

    providers_insert_source_type_data = PGFunction(
        schema="providers",
        signature="insert_source_type_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO providers.source_type (name) VALUES\n                ('csv'), ('scrap')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.create_entity(providers_insert_source_type_data) # type: ignore

    policies_insert_member_type_data = PGFunction(
        schema="policies",
        signature="insert_member_type_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO policies.member_type (name) VALUES\n                ('owner'), ('spouse'), ('dependent_1'), ('dependent_2'), ('dependent_3'), ('dependent_4'), ('dependent_5'), ('dependent_6'), ('dependent_7')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.create_entity(policies_insert_member_type_data) # type: ignore

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    policies_insert_member_type_data = PGFunction(
        schema="policies",
        signature="insert_member_type_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO policies.member_type (name) VALUES\n                ('owner'), ('spouse'), ('dependent_1'), ('dependent_2'), ('dependent_3'), ('dependent_4'), ('dependent_5'), ('dependent_6'), ('dependent_7')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.drop_entity(policies_insert_member_type_data) # type: ignore

    providers_insert_source_type_data = PGFunction(
        schema="providers",
        signature="insert_source_type_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO providers.source_type (name) VALUES\n                ('csv'), ('scrap')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.drop_entity(providers_insert_source_type_data) # type: ignore

    providers_insert_type_data = PGFunction(
        schema="providers",
        signature="insert_type_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO providers.type (name) VALUES\n                ('obamacare'), ('private'), ('group')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.drop_entity(providers_insert_type_data) # type: ignore

    providers_insert_name_data = PGFunction(
        schema="providers",
        signature="insert_name_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO providers.name (name) VALUES\n                ('aetna'), ('ambetter'), ('molina'), ('oscar'), ('florida_blue'), ('blue_cross'), ('united'), ('cigna'), ('avmed'), ('ameritas'), ('healthsherpa'), ('healthcare')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.drop_entity(providers_insert_name_data) # type: ignore

    policies_insert_status_data = PGFunction(
        schema="policies",
        signature="insert_status_data()",
        definition="RETURNS void AS\n        $$\n        BEGIN\n            INSERT INTO policies.status (name) VALUES\n                ('problem'), ('ok'), ('down')\n            ON CONFLICT (name)\n            DO NOTHING;\n        END;\n        $$ LANGUAGE plpgsql"
    )
    op.drop_entity(policies_insert_status_data) # type: ignore

    op.drop_table('snapshot', schema='snapshots')
    op.drop_table('provider', schema='providers')
    op.drop_table('source', schema='providers')
    op.drop_table('statement', schema='policies')
    op.drop_table('member', schema='policies')
    op.drop_table('entity', schema='snapshots')
    op.drop_table('type', schema='providers')
    op.drop_table('source_type', schema='providers')
    op.drop_table('name', schema='providers')
    op.drop_table('unique', schema='policies')
    op.drop_table('status', schema='policies')
    op.drop_table('member_type', schema='policies')
    op.drop_table('group', schema='policies')
    op.drop_table('detail', schema='policies')
    op.drop_table('basic', schema='policies')
    op.drop_table('auth', schema='policies')
    op.drop_table('address', schema='policies')
    # ### end Alembic commands ###
